{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","loc":{"line":3,"column":37}},{"name":"tslib","loc":{"line":10,"column":21}},{"name":"./legacy/sandbox","loc":{"line":12,"column":46}},{"name":"./patchers","loc":{"line":14,"column":24}},{"name":"./proxySandbox","loc":{"line":16,"column":51}},{"name":"./snapshotSandbox","loc":{"line":18,"column":54}}],"generated":{"js":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSandbox = createSandbox;\n\nvar _tslib = require(\"tslib\");\n\nvar _sandbox = _interopRequireDefault(require(\"./legacy/sandbox\"));\n\nvar _patchers = require(\"./patchers\");\n\nvar _proxySandbox = _interopRequireDefault(require(\"./proxySandbox\"));\n\nvar _snapshotSandbox = _interopRequireDefault(require(\"./snapshotSandbox\"));\n\n/**\n * 生成应用运行时沙箱\n *\n * 沙箱分两个类型：\n * 1. app 环境沙箱\n *  app 环境沙箱是指应用初始化过之后，应用会在什么样的上下文环境运行。每个应用的环境沙箱只会初始化一次，因为子应用只会触发一次 bootstrap 。\n *  子应用在切换时，实际上切换的是 app 环境沙箱。\n * 2. render 沙箱\n *  子应用在 app mount 开始前生成好的的沙箱。每次子应用切换过后，render 沙箱都会重现初始化。\n *\n * 这么设计的目的是为了保证每个子应用切换回来之后，还能运行在应用 bootstrap 之后的环境下。\n *\n * @param appName\n * @param elementGetter\n * @param singular\n */\nfunction createSandbox(appName, elementGetter, singular) {\n  // mounting freers are one-off and should be re-init at every mounting time\n  var mountingFreers = [];\n  var sideEffectsRebuilders = [];\n  var sandbox;\n\n  if (window.Proxy) {\n    sandbox = singular ? new _sandbox.default(appName) : new _proxySandbox.default(appName);\n  } else {\n    sandbox = new _snapshotSandbox.default(appName);\n  } // some side effect could be be invoked while bootstrapping, such as dynamic stylesheet injection with style-loader, especially during the development phase\n\n\n  var bootstrappingFreers = (0, _patchers.patchAtBootstrapping)(appName, elementGetter, sandbox.proxy, singular);\n  return {\n    proxy: sandbox.proxy,\n\n    /**\n     * 沙箱被 mount\n     * 可能是从 bootstrap 状态进入的 mount\n     * 也可能是从 unmount 之后再次唤醒进入 mount\n     */\n    mount: function mount() {\n      return (0, _tslib.__awaiter)(this, void 0, void 0, function () {\n        var sideEffectsRebuildersAtBootstrapping, sideEffectsRebuildersAtMounting;\n        return (0, _tslib.__generator)(this, function (_a) {\n          sideEffectsRebuildersAtBootstrapping = sideEffectsRebuilders.slice(0, bootstrappingFreers.length);\n          sideEffectsRebuildersAtMounting = sideEffectsRebuilders.slice(bootstrappingFreers.length); // must rebuild the side effects which added at bootstrapping firstly to recovery to nature state\n\n          if (sideEffectsRebuildersAtBootstrapping.length) {\n            sideEffectsRebuildersAtBootstrapping.forEach(function (rebuild) {\n              return rebuild();\n            });\n          }\n          /* ------------------------------------------ 因为有上下文依赖（window），以下代码执行顺序不能变 ------------------------------------------ */\n\n          /* ------------------------------------------ 1. 启动/恢复 沙箱------------------------------------------ */\n\n\n          sandbox.active();\n          /* ------------------------------------------ 2. 开启全局变量补丁 ------------------------------------------*/\n          // render 沙箱启动时开始劫持各类全局监听，尽量不要在应用初始化阶段有 事件监听/定时器 等副作用\n\n          mountingFreers = (0, _patchers.patchAtMounting)(appName, elementGetter, sandbox.proxy, singular);\n          /* ------------------------------------------ 3. 重置一些初始化时的副作用 ------------------------------------------*/\n          // 存在 rebuilder 则表明有些副作用需要重建\n\n          if (sideEffectsRebuildersAtMounting.length) {\n            sideEffectsRebuildersAtMounting.forEach(function (rebuild) {\n              return rebuild();\n            });\n          } // clean up rebuilders\n\n\n          sideEffectsRebuilders = [];\n          return [2\n          /*return*/\n          ];\n        });\n      });\n    },\n\n    /**\n     * 恢复 global 状态，使其能回到应用加载之前的状态\n     */\n    unmount: function unmount() {\n      return (0, _tslib.__awaiter)(this, void 0, void 0, function () {\n        return (0, _tslib.__generator)(this, function (_a) {\n          // record the rebuilders of window side effects (event listeners or timers)\n          // note that the frees of mounting phase are one-off as it will be re-init at next mounting\n          sideEffectsRebuilders = (0, _tslib.__spread)(bootstrappingFreers, mountingFreers).map(function (free) {\n            return free();\n          });\n          sandbox.inactive();\n          return [2\n          /*return*/\n          ];\n        });\n      });\n    }\n  };\n}"},"hash":"f1490c30fd1746f9c0840a24848ec4aa"}