{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireWildcard","loc":{"line":3,"column":38}},{"name":"./process-tpl","loc":{"line":14,"column":51}},{"name":"./utils","loc":{"line":16,"column":21}}],"generated":{"js":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getExternalStyleSheets = _getExternalStyleSheets;\nexports.getExternalScripts = _getExternalScripts;\nexports.execScripts = _execScripts;\nexports[\"default\"] = importHTML;\nexports.importEntry = importEntry;\n\nvar _processTpl2 = _interopRequireWildcard(require(\"./process-tpl\"));\n\nvar _utils = require(\"./utils\");\n\n/**\n * @author Kuitos\n * @homepage https://github.com/kuitos/\n * @since 2018-08-15 11:37\n */\nvar styleCache = {};\nvar scriptCache = {};\nvar embedHTMLCache = {};\n\nif (!window.fetch) {\n  throw new Error('[import-html-entry] Here is no \"fetch\" on the window env, you need to polyfill it');\n}\n\nvar defaultFetch = window.fetch.bind(window);\n\nfunction defaultGetTemplate(tpl) {\n  return tpl;\n}\n/**\n * convert external css link to inline style for performance optimization\n * @param template\n * @param styles\n * @param opts\n * @return embedHTML\n */\n\nfunction getEmbedHTML(template, styles) {\n  var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var _opts$fetch = opts.fetch,\n      fetch = _opts$fetch === void 0 ? defaultFetch : _opts$fetch;\n  var embedHTML = template;\n  return _getExternalStyleSheets(styles, fetch).then(function (styleSheets) {\n    embedHTML = styles.reduce(function (html, styleSrc, i) {\n      html = html.replace((0, _processTpl2.genLinkReplaceSymbol)(styleSrc), \"<style>/* \".concat(styleSrc, \" */\").concat(styleSheets[i], \"</style>\"));\n      return html;\n    }, embedHTML);\n    return embedHTML;\n  });\n}\n\nfunction getExecutableScript(scriptText, proxy, strictGlobal) {\n  window.proxy = proxy; // TODO 通过 strictGlobal 方式切换切换 with 闭包，待 with 方式坑趟平后再合并\n\n  return strictGlobal ? \";(function(window, self){with(window){;\".concat(scriptText, \"\\n}}).bind(window.proxy)(window.proxy, window.proxy);\") : \";(function(window, self){;\".concat(scriptText, \"\\n}).bind(window.proxy)(window.proxy, window.proxy);\");\n} // for prefetch\n\n\nfunction _getExternalStyleSheets(styles) {\n  var fetch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultFetch;\n  return Promise.all(styles.map(function (styleLink) {\n    if (styleLink.startsWith('<')) {\n      // if it is inline style\n      return (0, _utils.getInlineCode)(styleLink);\n    } else {\n      // external styles\n      return styleCache[styleLink] || (styleCache[styleLink] = fetch(styleLink).then(function (response) {\n        return response.text();\n      }));\n    }\n  }));\n} // for prefetch\n\n\nfunction _getExternalScripts(scripts) {\n  var fetch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultFetch;\n\n  var fetchScript = function fetchScript(scriptUrl) {\n    return scriptCache[scriptUrl] || (scriptCache[scriptUrl] = fetch(scriptUrl).then(function (response) {\n      return response.text();\n    }));\n  };\n\n  return Promise.all(scripts.map(function (script) {\n    if (typeof script === 'string') {\n      if (script.startsWith('<')) {\n        // if it is inline script\n        return (0, _utils.getInlineCode)(script);\n      } else {\n        // external script\n        return fetchScript(script);\n      }\n    } else {\n      // use idle time to load async script\n      var src = script.src,\n          async = script.async;\n\n      if (async) {\n        return {\n          async: true,\n          content: new Promise(function (resolve, reject) {\n            return (0, _utils.requestIdleCallback)(function () {\n              return fetchScript(src).then(resolve, reject);\n            });\n          })\n        };\n      }\n\n      return fetchScript(src);\n    }\n  }));\n}\n\nvar supportsUserTiming = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';\n\nfunction _execScripts(entry, scripts) {\n  var proxy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : window;\n  var opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var _opts$fetch2 = opts.fetch,\n      fetch = _opts$fetch2 === void 0 ? defaultFetch : _opts$fetch2,\n      _opts$strictGlobal = opts.strictGlobal,\n      strictGlobal = _opts$strictGlobal === void 0 ? false : _opts$strictGlobal;\n  return _getExternalScripts(scripts, fetch).then(function (scriptsText) {\n    var geval = eval;\n\n    function exec(scriptSrc, inlineScript, resolve) {\n      var markName = \"Evaluating script \".concat(scriptSrc);\n      var measureName = \"Evaluating Time Consuming: \".concat(scriptSrc);\n\n      if (undefined === 'development' && supportsUserTiming) {\n        performance.mark(markName);\n      }\n\n      if (scriptSrc === entry) {\n        (0, _utils.noteGlobalProps)(strictGlobal ? proxy : window);\n\n        try {\n          // bind window.proxy to change `this` reference in script\n          geval(getExecutableScript(inlineScript, proxy, strictGlobal));\n        } catch (e) {\n          console.error(\"error occurs while executing the entry \".concat(scriptSrc));\n          throw e;\n        }\n\n        var exports = proxy[(0, _utils.getGlobalProp)(strictGlobal ? proxy : window)] || {};\n        resolve(exports);\n      } else {\n        if (typeof inlineScript === 'string') {\n          try {\n            // bind window.proxy to change `this` reference in script\n            geval(getExecutableScript(inlineScript, proxy, strictGlobal));\n          } catch (e) {\n            console.error(\"error occurs while executing \".concat(scriptSrc));\n            throw e;\n          }\n        } else {\n          // external script marked with async\n          inlineScript.async && (inlineScript === null || inlineScript === void 0 ? void 0 : inlineScript.content.then(function (downloadedScriptText) {\n            return geval(getExecutableScript(downloadedScriptText, proxy));\n          })[\"catch\"](function (e) {\n            console.error(\"error occurs while executing async script \".concat(scriptSrc === null || scriptSrc === void 0 ? void 0 : scriptSrc.src));\n            throw e;\n          }));\n        }\n      }\n\n      if (undefined === 'development' && supportsUserTiming) {\n        performance.measure(measureName, markName);\n        performance.clearMarks(markName);\n        performance.clearMeasures(measureName);\n      }\n    }\n\n    function schedule(i, resolvePromise) {\n      if (i < scripts.length) {\n        var scriptSrc = scripts[i];\n        var inlineScript = scriptsText[i];\n        exec(scriptSrc, inlineScript, resolvePromise); // resolve the promise while the last script executed and entry not provided\n\n        if (!entry && i === scripts.length - 1) {\n          resolvePromise();\n        } else {\n          schedule(i + 1, resolvePromise);\n        }\n      }\n    }\n\n    return new Promise(function (resolve) {\n      return schedule(0, resolve);\n    });\n  });\n}\n\nfunction importHTML(url) {\n  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var fetch = defaultFetch;\n  var getPublicPath = _utils.defaultGetPublicPath;\n  var getTemplate = defaultGetTemplate; // compatible with the legacy importHTML api\n\n  if (typeof opts === 'function') {\n    fetch = opts;\n  } else {\n    fetch = opts.fetch || defaultFetch;\n    getPublicPath = opts.getPublicPath || opts.getDomain || _utils.defaultGetPublicPath;\n    getTemplate = opts.getTemplate || defaultGetTemplate;\n  }\n\n  return embedHTMLCache[url] || (embedHTMLCache[url] = fetch(url).then(function (response) {\n    return response.text();\n  }).then(function (html) {\n    var assetPublicPath = getPublicPath(url);\n\n    var _processTpl = (0, _processTpl2[\"default\"])(getTemplate(html), assetPublicPath),\n        template = _processTpl.template,\n        scripts = _processTpl.scripts,\n        entry = _processTpl.entry,\n        styles = _processTpl.styles;\n\n    return getEmbedHTML(template, styles, {\n      fetch: fetch\n    }).then(function (embedHTML) {\n      return {\n        template: embedHTML,\n        assetPublicPath: assetPublicPath,\n        getExternalScripts: function getExternalScripts() {\n          return _getExternalScripts(scripts, fetch);\n        },\n        getExternalStyleSheets: function getExternalStyleSheets() {\n          return _getExternalStyleSheets(styles, fetch);\n        },\n        execScripts: function execScripts(proxy, strictGlobal) {\n          if (!scripts.length) {\n            return Promise.resolve();\n          }\n\n          return _execScripts(entry, scripts, proxy, {\n            fetch: fetch,\n            strictGlobal: strictGlobal\n          });\n        }\n      };\n    });\n  }));\n}\n\n;\n\nfunction importEntry(entry) {\n  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _opts$fetch3 = opts.fetch,\n      fetch = _opts$fetch3 === void 0 ? defaultFetch : _opts$fetch3,\n      _opts$getTemplate = opts.getTemplate,\n      getTemplate = _opts$getTemplate === void 0 ? defaultGetTemplate : _opts$getTemplate;\n  var getPublicPath = opts.getPublicPath || opts.getDomain || _utils.defaultGetPublicPath;\n\n  if (!entry) {\n    throw new SyntaxError('entry should not be empty!');\n  } // html entry\n\n\n  if (typeof entry === 'string') {\n    return importHTML(entry, {\n      fetch: fetch,\n      getPublicPath: getPublicPath,\n      getTemplate: getTemplate\n    });\n  } // config entry\n\n\n  if (Array.isArray(entry.scripts) || Array.isArray(entry.styles)) {\n    var _entry$scripts = entry.scripts,\n        scripts = _entry$scripts === void 0 ? [] : _entry$scripts,\n        _entry$styles = entry.styles,\n        styles = _entry$styles === void 0 ? [] : _entry$styles,\n        _entry$html = entry.html,\n        html = _entry$html === void 0 ? '' : _entry$html;\n    return getEmbedHTML(getTemplate(html), styles, {\n      fetch: fetch\n    }).then(function (embedHTML) {\n      return {\n        template: embedHTML,\n        assetPublicPath: getPublicPath('/'),\n        getExternalScripts: function getExternalScripts() {\n          return _getExternalScripts(scripts, fetch);\n        },\n        getExternalStyleSheets: function getExternalStyleSheets() {\n          return _getExternalStyleSheets(styles, fetch);\n        },\n        execScripts: function execScripts(proxy, strictGlobal) {\n          if (!scripts.length) {\n            return Promise.resolve();\n          }\n\n          return _execScripts(scripts[scripts.length - 1], scripts, proxy, {\n            fetch: fetch,\n            strictGlobal: strictGlobal\n          });\n        }\n      };\n    });\n  } else {\n    throw new SyntaxError('entry scripts or styles should be array!');\n  }\n}"},"hash":"e2cb9409e0cafba05c50cf7e72f8dc7c"}