{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","loc":{"line":3,"column":37}},{"name":"lodash/cloneDeep","loc":{"line":11,"column":49}}],"generated":{"js":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.initGlobalState = initGlobalState;\nexports.getMicroAppStateActions = getMicroAppStateActions;\n\nvar _cloneDeep2 = _interopRequireDefault(require(\"lodash/cloneDeep\"));\n\nvar gloabalState = {};\nvar deps = {}; // 触发全局监听\n\nfunction emitGloabl(state, prevState) {\n  Object.keys(deps).forEach(function (id) {\n    if (deps[id] instanceof Function) {\n      deps[id]((0, _cloneDeep2.default)(state), (0, _cloneDeep2.default)(prevState));\n    }\n  });\n}\n\nfunction initGlobalState(state) {\n  if (state === void 0) {\n    state = {};\n  }\n\n  if (state === gloabalState) {\n    console.warn('[qiankun] state has not changed！');\n  } else {\n    var prevGloabalState = (0, _cloneDeep2.default)(gloabalState);\n    gloabalState = (0, _cloneDeep2.default)(state);\n    emitGloabl(gloabalState, prevGloabalState);\n  }\n\n  return getMicroAppStateActions(\"gloabal-\" + +new Date(), true);\n}\n\nfunction getMicroAppStateActions(id, isMaster) {\n  return {\n    /**\n     * onStateChange 全局依赖监听\n     *\n     * 收集 setState 时所需要触发的依赖\n     *\n     * 限制条件：每个子应用只有一个激活状态的全局监听，新监听覆盖旧监听，若只是监听部分属性，请使用 onStateChange\n     *\n     * 这么设计是为了减少全局监听滥用导致的内存爆炸\n     *\n     * 依赖数据结构为：\n     * {\n     *   {id}: callback\n     * }\n     *\n     * @param callback\n     * @param fireImmediately\n     */\n    onGlobalStateChange: function onGlobalStateChange(callback, fireImmediately) {\n      if (!(callback instanceof Function)) {\n        console.error('[qiankun] callback must be function!');\n        return;\n      }\n\n      if (deps[id]) {\n        console.warn(\"[qiankun] '\" + id + \"' gloabal listener already exists before this, new listener will overwrite it.\");\n      }\n\n      deps[id] = callback;\n      var cloneState = (0, _cloneDeep2.default)(gloabalState);\n\n      if (fireImmediately) {\n        callback(cloneState, cloneState);\n      }\n    },\n\n    /**\n     * setGlobalState 更新 store 数据\n     *\n     * 1. 对输入 state 的第一层属性做校验，只有初始化时声明过的第一层（bucket）属性才会被更改\n     * 2. 修改 store 并触发全局监听\n     *\n     * @param state\n     */\n    setGlobalState: function setGlobalState(state) {\n      if (state === void 0) {\n        state = {};\n      }\n\n      if (state === gloabalState) {\n        console.warn('[qiankun] state has not changed！');\n        return false;\n      }\n\n      var changeKeys = [];\n      var prevGloabalState = (0, _cloneDeep2.default)(gloabalState);\n      gloabalState = (0, _cloneDeep2.default)(Object.keys(state).reduce(function (_gloabalState, changeKey) {\n        var _a;\n\n        if (isMaster || changeKey in _gloabalState) {\n          changeKeys.push(changeKey);\n          return Object.assign(_gloabalState, (_a = {}, _a[changeKey] = state[changeKey], _a));\n        }\n\n        console.warn(\"[qiankun] '\" + changeKey + \"' not declared when init state\\uFF01\");\n        return _gloabalState;\n      }, gloabalState));\n\n      if (changeKeys.length === 0) {\n        console.warn('[qiankun] state has not changed！');\n        return false;\n      }\n\n      emitGloabl(gloabalState, prevGloabalState);\n      return true;\n    },\n    // 注销该应用下的依赖\n    offGlobalStateChange: function offGlobalStateChange() {\n      delete deps[id];\n      return true;\n    }\n  };\n}"},"hash":"f5b83a312ad639e3e5675a20f747fee4"}