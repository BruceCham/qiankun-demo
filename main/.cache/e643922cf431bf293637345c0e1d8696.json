{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","loc":{"line":3,"column":37}},{"name":"@babel/runtime/helpers/typeof","loc":{"line":10,"column":46}},{"name":"tslib","loc":{"line":12,"column":21}},{"name":"../../utils","loc":{"line":14,"column":21}}],"generated":{"js":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _tslib = require(\"tslib\");\n\nvar _utils = require(\"../../utils\");\n\nfunction isPropConfigurable(target, prop) {\n  var descriptor = Object.getOwnPropertyDescriptor(target, prop);\n  return descriptor ? descriptor.configurable : true;\n}\n\nfunction setWindowProp(prop, value, toDelete) {\n  if (value === undefined && toDelete) {\n    delete window[prop];\n  } else if (isPropConfigurable(window, prop) && (0, _typeof2.default)(prop) !== 'symbol') {\n    Object.defineProperty(window, prop, {\n      writable: true,\n      configurable: true\n    });\n    window[prop] = value;\n  }\n}\n/**\n * 基于 Proxy 实现的沙箱\n * TODO: 为了兼容性 singular 模式下依旧使用该沙箱，等新沙箱稳定之后再切换\n */\n\nvar SingularProxySandbox =\n/** @class */\nfunction () {\n  function SingularProxySandbox(name) {\n    /** 沙箱期间新增的全局变量 */\n    this.addedPropsMapInSandbox = new Map();\n    /** 沙箱期间更新的全局变量 */\n\n    this.modifiedPropsOriginalValueMapInSandbox = new Map();\n    /** 持续记录更新的(新增和修改的)全局变量的 map，用于在任意时刻做 snapshot */\n\n    this.currentUpdatedPropsValueMap = new Map();\n    this.sandboxRunning = true;\n    this.name = name;\n\n    var _a = this,\n        sandboxRunning = _a.sandboxRunning,\n        addedPropsMapInSandbox = _a.addedPropsMapInSandbox,\n        modifiedPropsOriginalValueMapInSandbox = _a.modifiedPropsOriginalValueMapInSandbox,\n        currentUpdatedPropsValueMap = _a.currentUpdatedPropsValueMap;\n\n    var boundValueSymbol = Symbol('bound value');\n    var rawWindow = window;\n    var fakeWindow = Object.create(null);\n    var proxy = new Proxy(fakeWindow, {\n      set: function set(_, p, value) {\n        if (sandboxRunning) {\n          if (!rawWindow.hasOwnProperty(p)) {\n            addedPropsMapInSandbox.set(p, value);\n          } else if (!modifiedPropsOriginalValueMapInSandbox.has(p)) {\n            // 如果当前 window 对象存在该属性，且 record map 中未记录过，则记录该属性初始值\n            var originalValue = rawWindow[p];\n            modifiedPropsOriginalValueMapInSandbox.set(p, originalValue);\n          }\n\n          currentUpdatedPropsValueMap.set(p, value); // 必须重新设置 window 对象保证下次 get 时能拿到已更新的数据\n          // eslint-disable-next-line no-param-reassign\n\n          rawWindow[p] = value;\n          return true;\n        }\n\n        if (undefined === 'development') {\n          console.warn(\"[qiankun] Set window.\" + p.toString() + \" while sandbox destroyed or inactive in \" + name + \"!\");\n        } // 在 strict-mode 下，Proxy 的 handler.set 返回 false 会抛出 TypeError，在沙箱卸载的情况下应该忽略错误\n\n\n        return true;\n      },\n      get: function get(_, p) {\n        // avoid who using window.window or window.self to escape the sandbox environment to touch the really window\n        // or use window.top to check if an iframe context\n        // see https://github.com/eligrey/FileSaver.js/blob/master/src/FileSaver.js#L13\n        if (p === 'top' || p === 'window' || p === 'self') {\n          return proxy;\n        }\n\n        var value = rawWindow[p];\n        /*\n        仅绑定 !isConstructable && isCallable 的函数对象，如 window.console、window.atob 这类。目前没有完美的检测方式，这里通过 prototype 中是否还有可枚举的拓展方法的方式来判断\n        @warning 这里不要随意替换成别的判断方式，因为可能触发一些 edge case（比如在 lodash.isFunction 在 iframe 上下文中可能由于调用了 top window 对象触发的安全异常）\n         */\n\n        if (typeof value === 'function' && !(0, _utils.isConstructable)(value)) {\n          if (value[boundValueSymbol]) {\n            return value[boundValueSymbol];\n          }\n\n          var boundValue_1 = value.bind(rawWindow); // some callable function has custom fields, we need to copy the enumerable props to boundValue. such as moment function.\n\n          Object.keys(value).forEach(function (key) {\n            return boundValue_1[key] = value[key];\n          });\n          Object.defineProperty(value, boundValueSymbol, {\n            enumerable: false,\n            value: boundValue_1\n          });\n          return boundValue_1;\n        }\n\n        return value;\n      },\n      // trap in operator\n      // see https://github.com/styled-components/styled-components/blob/master/packages/styled-components/src/constants.js#L12\n      has: function has(_, p) {\n        return p in rawWindow;\n      }\n    });\n    this.proxy = proxy;\n  }\n\n  SingularProxySandbox.prototype.active = function () {\n    if (!this.sandboxRunning) {\n      this.currentUpdatedPropsValueMap.forEach(function (v, p) {\n        return setWindowProp(p, v);\n      });\n    }\n\n    this.sandboxRunning = true;\n  };\n\n  SingularProxySandbox.prototype.inactive = function () {\n    if (undefined === 'development') {\n      console.info(\"[qiankun:sandbox] \" + this.name + \" modified global properties restore...\", (0, _tslib.__spread)(this.addedPropsMapInSandbox.keys(), this.modifiedPropsOriginalValueMapInSandbox.keys()));\n    } // renderSandboxSnapshot = snapshot(currentUpdatedPropsValueMapForSnapshot);\n    // restore global props to initial snapshot\n\n\n    this.modifiedPropsOriginalValueMapInSandbox.forEach(function (v, p) {\n      return setWindowProp(p, v);\n    });\n    this.addedPropsMapInSandbox.forEach(function (_, p) {\n      return setWindowProp(p, undefined, true);\n    });\n    this.sandboxRunning = false;\n  };\n\n  return SingularProxySandbox;\n}();\n\nvar _default = SingularProxySandbox;\nexports.default = _default;"},"hash":"d6414dce9c145421499efb506762a25f"}