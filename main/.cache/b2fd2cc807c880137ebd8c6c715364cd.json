{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","loc":{"line":3,"column":37}},{"name":"lodash/uniq","loc":{"line":10,"column":44}},{"name":"tslib","loc":{"line":12,"column":21}},{"name":"./common","loc":{"line":14,"column":22}}],"generated":{"js":"\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _uniq2 = _interopRequireDefault(require(\"lodash/uniq\"));\n\nvar _tslib = require(\"tslib\");\n\nvar _common = require(\"./common\");\n\n// zone.js will overwrite Object.defineProperty\nvar rawObjectDefineProperty = Object.defineProperty;\n\nfunction createFakeWindow(global) {\n  var fakeWindow = {};\n  /*\n   copy the non-configurable property of global to fakeWindow\n   see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/getOwnPropertyDescriptor\n   > A property cannot be reported as non-configurable, if it does not exists as an own property of the target object or if it exists as a configurable own property of the target object.\n   */\n\n  Object.getOwnPropertyNames(global).filter(function (p) {\n    var descriptor = Object.getOwnPropertyDescriptor(global, p);\n    return !(descriptor === null || descriptor === void 0 ? void 0 : descriptor.configurable);\n  }).forEach(function (p) {\n    var descriptor = Object.getOwnPropertyDescriptor(global, p);\n\n    if (descriptor) {\n      /*\n       make top/self/window property configurable and writable, otherwise it will cause TypeError while get trap return.\n       see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/get\n       > The value reported for a property must be the same as the value of the corresponding target object property if the target object property is a non-writable, non-configurable data property.\n       */\n      if (p === 'top' || p === 'self' || p === 'window') {\n        descriptor.configurable = true;\n        descriptor.writable = true;\n      } // just for test\n\n\n      if (undefined === 'test' && p === 'mockTop') {\n        descriptor.configurable = true;\n        descriptor.writable = true;\n      } // freeze the descriptor to avoid being modified by zone.js\n      // see https://github.com/angular/zone.js/blob/a5fe09b0fac27ac5df1fa746042f96f05ccb6a00/lib/browser/define-property.ts#L71\n\n\n      rawObjectDefineProperty(fakeWindow, p, Object.freeze(descriptor));\n    }\n  });\n  return fakeWindow;\n}\n/**\n * 基于 Proxy 实现的沙箱\n */\n\nvar ProxySandbox =\n/** @class */\nfunction () {\n  function ProxySandbox(name) {\n    /** window 值变更的记录快照 */\n    this.updateValueMap = new Map();\n    this.sandboxRunning = true;\n    this.name = name;\n\n    var _a = this,\n        sandboxRunning = _a.sandboxRunning,\n        updateValueMap = _a.updateValueMap; // https://github.com/umijs/qiankun/pull/192\n\n\n    var rawWindow = window;\n    var fakeWindow = createFakeWindow(rawWindow);\n    var proxy = new Proxy(fakeWindow, {\n      set: function set(_, p, value) {\n        if (sandboxRunning) {\n          updateValueMap.set(p, value);\n          return true;\n        }\n\n        if (undefined === 'development') {\n          console.warn(\"[qiankun] Set window.\" + p.toString() + \" while sandbox destroyed or inactive in \" + name + \"!\");\n        } // 在 strict-mode 下，Proxy 的 handler.set 返回 false 会抛出 TypeError，在沙箱卸载的情况下应该忽略错误\n\n\n        return true;\n      },\n      get: function get(_, p) {\n        // just for test\n        if (undefined === 'test' && p === 'mockTop') {\n          return proxy;\n        } // avoid who using window.window or window.self to escape the sandbox environment to touch the really window\n        // or use window.top to check if an iframe context\n        // see https://github.com/eligrey/FileSaver.js/blob/master/src/FileSaver.js#L13\n\n\n        if (p === 'top' || p === 'window' || p === 'self') {\n          return proxy;\n        } // proxy.hasOwnProperty would invoke getter firstly, then its value represented as rawWindow.hasOwnProperty\n\n\n        if (p === 'hasOwnProperty') {\n          return function (key) {\n            return updateValueMap.has(key) || rawWindow.hasOwnProperty(key);\n          };\n        } // call proxy getter interceptors\n\n\n        var proxyPropertyGetter = (0, _common.getProxyPropertyGetter)(proxy, p);\n\n        if (proxyPropertyGetter) {\n          return proxyPropertyGetter();\n        } // Take priority from the updateValueMap, or fallback to window\n\n\n        var value = updateValueMap.get(p) || rawWindow[p];\n        return (0, _common.getTargetValue)(rawWindow, value);\n      },\n      // trap in operator\n      // see https://github.com/styled-components/styled-components/blob/master/packages/styled-components/src/constants.js#L12\n      has: function has(_, p) {\n        return updateValueMap.has(p) || p in rawWindow;\n      },\n      getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, p) {\n        if (updateValueMap.has(p)) {\n          // if the property is existed on raw window, use it original descriptor\n          var descriptor = Object.getOwnPropertyDescriptor(rawWindow, p);\n\n          if (descriptor) {\n            return descriptor;\n          }\n\n          return {\n            configurable: true,\n            enumerable: true,\n            writable: true,\n            value: updateValueMap.get(p)\n          };\n        }\n        /*\n         as the descriptor of top/self/window/mockTop in raw window are configurable but not in proxy target, we need to get it from target to avoid TypeError\n         see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/getOwnPropertyDescriptor\n         > A property cannot be reported as non-configurable, if it does not exists as an own property of the target object or if it exists as a configurable own property of the target object.\n         */\n\n        if (target.hasOwnProperty(p)) {\n          return Object.getOwnPropertyDescriptor(target, p);\n        }\n\n        if (rawWindow.hasOwnProperty(p)) {\n          return Object.getOwnPropertyDescriptor(rawWindow, p);\n        }\n\n        return undefined;\n      },\n      // trap to support iterator with sandbox\n      ownKeys: function ownKeys() {\n        return (0, _uniq2.default)((0, _tslib.__spread)(Reflect.ownKeys(rawWindow), updateValueMap.keys()));\n      },\n      deleteProperty: function deleteProperty(_, p) {\n        if (updateValueMap.has(p)) {\n          updateValueMap.delete(p);\n          return true;\n        }\n\n        return true;\n      }\n    });\n    this.proxy = proxy;\n  }\n\n  ProxySandbox.prototype.active = function () {\n    this.sandboxRunning = true;\n  };\n\n  ProxySandbox.prototype.inactive = function () {\n    if (undefined === 'development') {\n      console.info(\"[qiankun:sandbox] \" + this.name + \" modified global properties restore...\", (0, _tslib.__spread)(this.updateValueMap.keys()));\n    }\n\n    this.sandboxRunning = false;\n  };\n\n  return ProxySandbox;\n}();\n\nvar _default = ProxySandbox;\nexports.default = _default;"},"hash":"213b5787c40266bcac06803abfb13062"}