{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","loc":{"line":3,"column":37}},{"name":"@babel/runtime/helpers/slicedToArray","loc":{"line":11,"column":53}},{"name":"./utils","loc":{"line":13,"column":21}}],"generated":{"js":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = processTpl;\nexports.genIgnoreAssetReplaceSymbol = exports.inlineScriptReplaceSymbol = exports.genScriptReplaceSymbol = exports.genLinkReplaceSymbol = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _utils = require(\"./utils\");\n\n/**\n * @author Kuitos\n * @homepage https://github.com/kuitos/\n * @since 2018-09-03 15:04\n */\nvar ALL_SCRIPT_REGEX = /<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi;\nvar SCRIPT_TAG_REGEX = /<(script)[\\t-\\r \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]+((?!type=('|')text\\/ng\\x2Dtemplate\\3)[\\s\\S])*?>[\\s\\S]*?<\\/\\1>/i;\nvar SCRIPT_SRC_REGEX = /.*\\ssrc=('|\")?([^>'\"\\s]+)/;\nvar SCRIPT_ENTRY_REGEX = /.*\\sentry\\s*.*/;\nvar SCRIPT_ASYNC_REGEX = /.*\\sasync\\s*.*/;\nvar LINK_TAG_REGEX = /<(link)\\s+.*?>/gi;\nvar LINK_IGNORE_REGEX = /.*ignore\\s*.*/;\nvar LINK_PRELOAD_OR_PREFETCH_REGEX = /\\srel=('|\")?(preload|prefetch)\\1/;\nvar LINK_HREF_REGEX = /.*\\shref=('|\")?([^>'\"\\s]+)/;\nvar STYLE_TAG_REGEX = /<style[^>]*>[\\s\\S]*?<\\/style>/gi;\nvar STYLE_TYPE_REGEX = /\\s+rel=('|\")?stylesheet\\1.*/;\nvar STYLE_HREF_REGEX = /.*\\shref=('|\")?([^>'\"\\s]+)/;\nvar STYLE_IGNORE_REGEX = /<style(\\s+|\\s+.+\\s+)ignore(\\s*|\\s+.*)>/i;\nvar HTML_COMMENT_REGEX = /<!--([\\s\\S]*?)-->/g;\nvar SCRIPT_IGNORE_REGEX = /<script(\\s+|\\s+.+\\s+)ignore(\\s*|\\s+.*)>/i;\n\nfunction hasProtocol(url) {\n  return url.startsWith('//') || url.startsWith('http://') || url.startsWith('https://');\n}\n\nfunction getEntirePath(path, baseURI) {\n  return new URL(path, baseURI).toString();\n}\n\nvar genLinkReplaceSymbol = function genLinkReplaceSymbol(linkHref) {\n  var preloadOrPrefetch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return \"<!-- \".concat(preloadOrPrefetch ? 'prefetch/preload' : '', \" link \").concat(linkHref, \" replaced by import-html-entry -->\");\n};\n\nexports.genLinkReplaceSymbol = genLinkReplaceSymbol;\n\nvar genScriptReplaceSymbol = function genScriptReplaceSymbol(scriptSrc) {\n  var async = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return \"<!-- \".concat(async ? 'async' : '', \" script \").concat(scriptSrc, \" replaced by import-html-entry -->\");\n};\n\nexports.genScriptReplaceSymbol = genScriptReplaceSymbol;\nvar inlineScriptReplaceSymbol = \"<!-- inline scripts replaced by import-html-entry -->\";\nexports.inlineScriptReplaceSymbol = inlineScriptReplaceSymbol;\n\nvar genIgnoreAssetReplaceSymbol = function genIgnoreAssetReplaceSymbol(url) {\n  return \"<!-- ignore asset \".concat(url || 'file', \" replaced by import-html-entry -->\");\n};\n/**\n * parse the script link from the template\n * 1. collect stylesheets\n * 2. use global eval to evaluate the inline scripts\n *    see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function#Difference_between_Function_constructor_and_function_declaration\n *    see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#Do_not_ever_use_eval!\n * @param tpl\n * @param baseURI\n * @stripStyles whether to strip the css links\n * @returns {{template: void | string | *, scripts: *[], entry: *}}\n */\n\n\nexports.genIgnoreAssetReplaceSymbol = genIgnoreAssetReplaceSymbol;\n\nfunction processTpl(tpl, baseURI) {\n  var scripts = [];\n  var styles = [];\n  var entry = null;\n  var template = tpl\n  /*\n  remove html comment first\n  */\n  .replace(HTML_COMMENT_REGEX, '').replace(LINK_TAG_REGEX, function (match) {\n    /*\n    change the css link\n    */\n    var styleType = !!match.match(STYLE_TYPE_REGEX);\n\n    if (styleType) {\n      var styleHref = match.match(STYLE_HREF_REGEX);\n      var styleIgnore = match.match(LINK_IGNORE_REGEX);\n\n      if (styleHref) {\n        var href = styleHref && styleHref[2];\n        var newHref = href;\n\n        if (href && !hasProtocol(href)) {\n          newHref = getEntirePath(href, baseURI);\n        }\n\n        if (styleIgnore) {\n          return genIgnoreAssetReplaceSymbol(newHref);\n        }\n\n        styles.push(newHref);\n        return genLinkReplaceSymbol(newHref);\n      }\n    }\n\n    var preloadOrPrefetchType = match.match(LINK_PRELOAD_OR_PREFETCH_REGEX) && match.match(LINK_HREF_REGEX);\n\n    if (preloadOrPrefetchType) {\n      var _match$match = match.match(LINK_HREF_REGEX),\n          _match$match2 = (0, _slicedToArray2[\"default\"])(_match$match, 3),\n          linkHref = _match$match2[2];\n\n      return genLinkReplaceSymbol(linkHref, true);\n    }\n\n    return match;\n  }).replace(STYLE_TAG_REGEX, function (match) {\n    if (STYLE_IGNORE_REGEX.test(match)) {\n      return genIgnoreAssetReplaceSymbol('style file');\n    }\n\n    return match;\n  }).replace(ALL_SCRIPT_REGEX, function (match) {\n    var scriptIgnore = match.match(SCRIPT_IGNORE_REGEX); // in order to keep the exec order of all javascripts\n    // if it is a external script\n\n    if (SCRIPT_TAG_REGEX.test(match) && match.match(SCRIPT_SRC_REGEX)) {\n      /*\n      collect scripts and replace the ref\n      */\n      var matchedScriptEntry = match.match(SCRIPT_ENTRY_REGEX);\n      var matchedScriptSrcMatch = match.match(SCRIPT_SRC_REGEX);\n      var matchedScriptSrc = matchedScriptSrcMatch && matchedScriptSrcMatch[2];\n\n      if (entry && matchedScriptEntry) {\n        throw new SyntaxError('You should not set multiply entry script!');\n      } else {\n        // append the domain while the script not have an protocol prefix\n        if (matchedScriptSrc && !hasProtocol(matchedScriptSrc)) {\n          matchedScriptSrc = getEntirePath(matchedScriptSrc, baseURI);\n        }\n\n        entry = entry || matchedScriptEntry && matchedScriptSrc;\n      }\n\n      if (scriptIgnore) {\n        return genIgnoreAssetReplaceSymbol(matchedScriptSrc || 'js file');\n      }\n\n      if (matchedScriptSrc) {\n        var asyncScript = !!match.match(SCRIPT_ASYNC_REGEX);\n        scripts.push(asyncScript ? {\n          async: true,\n          src: matchedScriptSrc\n        } : matchedScriptSrc);\n        return genScriptReplaceSymbol(matchedScriptSrc, asyncScript);\n      }\n\n      return match;\n    } else {\n      if (scriptIgnore) {\n        return genIgnoreAssetReplaceSymbol('js file');\n      } // if it is an inline script\n\n\n      var code = (0, _utils.getInlineCode)(match); // remove script blocks when all of these lines are comments.\n\n      var isPureCommentBlock = code.split(/[\\r\\n]+/).every(function (line) {\n        return !line.trim() || line.trim().startsWith('//');\n      });\n\n      if (!isPureCommentBlock) {\n        scripts.push(match);\n      }\n\n      return inlineScriptReplaceSymbol;\n    }\n  });\n  scripts = scripts.filter(function (script) {\n    // filter empty script\n    return !!script;\n  });\n  return {\n    template: template,\n    scripts: scripts,\n    styles: styles,\n    // set the last script as entry if have not set\n    entry: entry || scripts[scripts.length - 1]\n  };\n}"},"hash":"7bed6bee9a65cbe49f97acd92f0f0f0d"}